<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Livestream Editor</title>
  <link rel="stylesheet" href="layout.css" />
</head>
<body>
  <div class="toolbar">
    <!-- Logo in toolbar -->
    <img
      class="company-logo"
      src="https://avatars.githubusercontent.com/oa/3033067?s=240&amp;u=00ea87da3687ce9135fac4ae4cf569eb7179885d&amp;v=4"
      alt="Company"
    />

    <!-- Text tools -->
    <button onclick="exec('bold')">B</button>
    <button onclick="exec('underline')">U</button>
    <button onclick="exec('insertUnorderedList')">• List</button>
    <button onclick="exec('insertOrderedList')">1. List</button>
    <select onchange="exec('fontSize', this.value)">
      <option value="3">Normal</option>
      <option value="5">Large</option>
    </select>
    <select onchange="exec('fontName', this.value)">
      <option>Arial</option>
      <option>Courier</option>
      <option>Times</option>
    </select>

    <!-- Title input -->
    <input id="title" placeholder="Screen Title" style="width:200px" />

    <!-- Tab Capture -->
    <button id="castTab">Cast Tab</button>

    <!-- Camera PiP -->
    <button id="addCam">Add My Cam</button>

    <!-- Image / Video upload -->
    <input type="file" id="imgUpload" accept="image/*" />
    <input type="file" id="vidUpload" accept="video/*" />

    <!-- Mic controls -->
    <button id="micToggle">Mic On/Off</button>
    <input type="range" id="micVol" min="0" max="2" step="0.01" value="1" />
    <input type="range" id="tabVol" min="0" max="2" step="0.01" value="1" />
    <input type="range" id="mixVol" min="0" max="2" step="0.01" value="1" />

    <!-- Stream controls -->
    <button id="start">Start Stream</button>
    <button id="stop">Stop Stream</button>
    <button id="copyURL">Copy URL</button>
    <button id="exportLayout">Export Layout</button>
    <input type="file" id="importLayout" />
  </div>

  <h1 style="padding:8px">Livestream Editor</h1>
  <div id="canvas">
    <!-- Editable text box -->
    <div
      id="textBox"
      class="draggable"
      contentEditable="true"
      style="padding:8px; border:1px dashed #999; min-width:100px; min-height:50px;"
    >
      Edit me!
    </div>

    <!-- Watermark logo -->
    <img
      class="company-logo"
      src="https://avatars.githubusercontent.com/oa/3033067?s=240&amp;u=00ea87da3687ce9135fac4ae4cf569eb7179885d&amp;v=4"
      alt=""
    />
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/interactjs/dist/interact.min.js"></script>
  <script>
    (async () => {
      // —— ROOM & SOCKET.IO SETUP ——
      const params = new URLSearchParams(location.search);
      const room = params.get("room");
      const socket = io({ query: { room } });

      document.getElementById("copyURL").onclick = () =>
        navigator.clipboard.writeText(location.href);

      // —— DRAG/RESIZE/ROTATE ——  
      interact(".draggable")
        .draggable({ onmove: dragMove })
        .resizable({
          edges: { left: true, right: true, top: true, bottom: true },
          onmove: resizeMove,
        })
        .gesturable({ onmove: rotateMove });

      function dragMove(evt) {
        let el = evt.target;
        let x = (parseFloat(el.getAttribute("data-x")) || 0) + evt.dx;
        let y = (parseFloat(el.getAttribute("data-y")) || 0) + evt.dy;
        let rot = parseFloat(el.getAttribute("data-rot")) || 0;
        el.style.transform = `translate(${x}px,${y}px) rotate(${rot}deg)`;
        el.setAttribute("data-x", x);
        el.setAttribute("data-y", y);
      }
      function resizeMove(evt) {
        let el = evt.target;
        el.style.width = evt.rect.width + "px";
        el.style.height = evt.rect.height + "px";
        dragMove(evt);
      }
      function rotateMove(evt) {
        let el = evt.target;
        let rot = (parseFloat(el.getAttribute("data-rot")) || 0) + evt.da;
        el.setAttribute("data-rot", rot);
        el.style.transform = `translate(${el.getAttribute(
          "data-x"
        )}px,${el.getAttribute("data-y")}px) rotate(${rot}deg)`;
      }

      // —— TEXT TOOL HELPERS ——  
      window.exec = (cmd, val = null) =>
        document.execCommand(cmd, false, val);

      // —— AUDIO MIXER SETUP ——  
      const ctx = new AudioContext();
      let micStream, tabStream, camStream;
      let micNode, tabNode;
      function connectSource(stream, setter) {
        const src = ctx.createMediaStreamSource(stream);
        const gain = ctx.createGain();
        src.connect(gain).connect(ctx.destination);
        setter({ node: gain, stream });
      }

      // Mic on/off & vol
      document.getElementById("micToggle").onclick = async () => {
        if (!micStream) {
          micStream = await navigator.mediaDevices.getUserMedia({
            audio: true,
          });
          connectSource(micStream, (o) => (micNode = o));
        } else {
          micStream.getTracks().forEach((t) => (t.enabled = !t.enabled));
        }
      };
      document.getElementById("micVol").oninput = (e) =>
        micNode && (micNode.node.gain.value = e.target.value);

      // Tab casting
      document.getElementById("castTab").onclick = async () => {
        tabStream = await navigator.mediaDevices.getDisplayMedia({
          audio: true,
          video: true,
        });
        connectSource(tabStream, (o) => (tabNode = o));
        document.getElementById("tabVol").oninput = (e) =>
          (tabNode.node.gain.value = e.target.value);
        placeVideo(tabStream);
      };

      // Camera PiP
      document.getElementById("addCam").onclick = async () => {
        camStream = await navigator.mediaDevices.getUserMedia({
          video: true,
        });
        placeVideo(camStream);
      };

      // Helper: place video onto canvas
      function placeVideo(stream) {
        const v = document.createElement("video");
        v.className = "draggable";
        v.srcObject = stream;
        v.autoplay = true;
        v.muted = true;
        v.style.border = "2px solid #0099ff";
        v.style.width = "200px";
        v.style.height = "150px";
        document.getElementById("canvas").appendChild(v);
        interact(v).draggable(true).resizable(true).gesturable(true);
      }

      // Image / Video upload
      document.getElementById("imgUpload").onchange = (e) => {
        let file = e.target.files[0],
          url = URL.createObjectURL(file),
          img = document.createElement("img");
        img.src = url;
        img.className = "draggable";
        img.style.width = "150px";
        img.style.height = "auto";
        document.getElementById("canvas").append(img);
        interact(img).draggable(true).resizable(true).gesturable(true);
      };
      document.getElementById("vidUpload").onchange = (e) => {
        let file = e.target.files[0],
          url = URL.createObjectURL(file),
          vid = document.createElement("video");
        vid.src = url;
        vid.controls = true;
        vid.autoplay = true;
        vid.className = "draggable";
        vid.style.width = "200px";
        vid.style.height = "150px";
        document.getElementById("canvas").append(vid);
        interact(vid).draggable(true).resizable(true).gesturable(true);
      };

      // —— STREAM CONTROLS ——  
      let recorder;
      document.getElementById("start").onclick = () => {
        const mixedStream = ctx.createMediaStreamDestination();
        if (micNode) micNode.node.connect(mixedStream);
        if (tabNode) tabNode.node.connect(mixedStream);

        recorder = new MediaRecorder(mixedStream.stream, {
          mimeType: "video/webm; codecs=vp8,opus",
        });
        recorder.ondataavailable = (e) => {
          if (e.data.size) socket.emit("stream-chunk", e.data);
        };
        recorder.start(250);
      };
      document.getElementById("stop").onclick = () => recorder && recorder.stop();

      // —— LAYOUT EXPORT/IMPORT ——  
      document.getElementById("exportLayout").onclick = () => {
        const layout = [];
        document
          .querySelectorAll("#canvas .draggable")
          .forEach((el) => {
            layout.push({
              tag: el.tagName,
              html: el.innerHTML,
              styles: {
                width: el.style.width,
                height: el.style.height,
                transform: el.style.transform,
              },
              attrs: {
                src: el.src || null,
              },
            });
          });
        const blob = new Blob([JSON.stringify(layout)], {
          type: "application/json",
        });
        const a = document.createElement("a");
        a.href = URL.createObjectURL(blob);
        a.download = "layout.json";
        a.click();
      };
      document.getElementById("importLayout").onchange = (e) => {
        const file = e.target.files[0];
        const reader = new FileReader();
        reader.onload = () => {
          const data = JSON.parse(reader.result);
          const canvas = document.getElementById("canvas");
          canvas.innerHTML = ""; // clear
          data.forEach((item) => {
            const el = document.createElement(item.tag);
            if (item.attrs.src) el.src = item.attrs.src;
            el.innerHTML = item.html;
            Object.assign(el.style, item.styles);
            el.className = "draggable";
            canvas.append(el);
            interact(el).draggable(true).resizable(true).gesturable(true);
          });
        };
        reader.readAsText(file);
      };
    })();
  </script>
</body>
</html>